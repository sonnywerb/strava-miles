name: Update Strava Stats

on:
  # Run on push to main
  push:
    branches: [ main ]
  # Run every 15 minutes for fresh data
  schedule:
    - cron: '*/15 * * * *'
  # Allow manual trigger
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-stats:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        
    - name: Fetch Strava Stats
      env:
        STRAVA_CLIENT_ID: ${{ secrets.VITE_STRAVA_CLIENT_ID }}
        STRAVA_CLIENT_SECRET: ${{ secrets.VITE_STRAVA_CLIENT_SECRET }}
        STRAVA_ACCESS_TOKEN: ${{ secrets.VITE_STRAVA_ACCESS_TOKEN }}
        STRAVA_REFRESH_TOKEN: ${{ secrets.VITE_STRAVA_REFRESH_TOKEN }}
      run: |        
        # Create a simple Node.js script to fetch Strava data
        cat > fetch-strava-stats.js << 'EOF'
        const https = require('https');
        const fs = require('fs');
        
        // Function to make HTTPS requests
        function makeRequest(options, postData = null) {
          return new Promise((resolve, reject) => {
            const req = https.request(options, (res) => {
              let data = '';
              res.on('data', chunk => data += chunk);
              res.on('end', () => {
                try {
                  resolve(JSON.parse(data));
                } catch (e) {
                  reject(e);
                }
              });
            });
            
            req.on('error', reject);
            
            if (postData) {
              req.write(postData);
            }
            req.end();
          });
        }
        
        // Function to refresh access token if needed
        async function refreshAccessToken() {
          const postData = new URLSearchParams({
            client_id: process.env.STRAVA_CLIENT_ID,
            client_secret: process.env.STRAVA_CLIENT_SECRET,
            refresh_token: process.env.STRAVA_REFRESH_TOKEN,
            grant_type: 'refresh_token'
          }).toString();
          
          const options = {
            hostname: 'www.strava.com',
            port: 443,
            path: '/oauth/token',
            method: 'POST',
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded',
              'Content-Length': Buffer.byteLength(postData)
            }
          };
          
          try {
            const response = await makeRequest(options, postData);
            return response.access_token;
          } catch (error) {
            console.error('Failed to refresh token:', error);
            throw error;
          }
        }
        
        // Function to make authenticated API calls with token refresh
        async function makeAuthenticatedRequest(path, accessToken, retryCount = 0) {
          const options = {
            hostname: 'www.strava.com',
            port: 443,
            path: path,
            method: 'GET',
            headers: {
              'Authorization': `Bearer ${accessToken}`
            }
          };
          
          try {
            return await makeRequest(options);
          } catch (error) {
            // If unauthorized and haven't retried, try refreshing token
            if (error.message && error.message.includes('401') && retryCount === 0) {
              console.log('Access token expired, refreshing...');
              const newToken = await refreshAccessToken();
              return makeAuthenticatedRequest(path, newToken, 1);
            }
            throw error;
          }
        }
        
        // Main function to fetch stats
        async function fetchStats() {
          try {
            let accessToken = process.env.STRAVA_ACCESS_TOKEN;
            
            if (!accessToken) {
              throw new Error('STRAVA_ACCESS_TOKEN not found');
            }
            
            // Get athlete info
            const athlete = await makeAuthenticatedRequest('/api/v3/athlete', accessToken);
            console.log(`Fetching stats for athlete: ${athlete.firstname} ${athlete.lastname}`);
            
            // Get athlete stats
            const stats = await makeAuthenticatedRequest(`/api/v3/athletes/${athlete.id}/stats`, accessToken);
            
            // Extract YTD running distance and convert to miles
            const ytdRunDistance = stats.ytd_run_totals?.distance || 0;
            const miles = ytdRunDistance * 0.000621371; // Convert meters to miles
            
            // Create stats object
            const statsData = {
              totalMiles: parseFloat(miles.toFixed(1)),
              lastUpdated: new Date().toISOString(),
              athleteName: `${athlete.firstname} ${athlete.lastname}`,
              ytdRunTotals: stats.ytd_run_totals,
              generatedAt: new Date().toISOString()
            };
            
            console.log(`Total YTD running miles: ${statsData.totalMiles}`);
            
            // Write to public directory
            fs.writeFileSync('strava-miles/public/strava-stats.json', JSON.stringify(statsData, null, 2));
            console.log('Stats written to strava-miles/public/strava-stats.json');
            
          } catch (error) {
            console.error('Error fetching Strava stats:', error);
            process.exit(1);
          }
        }
        
        fetchStats();
        EOF
        
        # Run the script
        node fetch-strava-stats.js
        
    - name: Commit updated stats
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add strava-miles/public/strava-stats.json
        
        # Only commit if there are changes
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Update Strava stats - $(date)"
          git push https://x-access-token:${GITHUB_TOKEN}@github.com/sonnywerb/strava-miles.git HEAD:main
        fi